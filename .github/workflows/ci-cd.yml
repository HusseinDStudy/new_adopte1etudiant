name: CI/CD Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  DATABASE_URL: "postgresql://testuser:testpass@localhost:5432/testdb"
  JWT_SECRET: "test-jwt-secret-for-ci"
  GOOGLE_CLIENT_ID: "test-google-client-id"
  GOOGLE_CLIENT_SECRET: "test-google-client-secret"

jobs:
  # --- Continuous Integration Job ---
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Setup Environment Variables
        run: |
          cd apps/api
          cp .env.example .env
          echo "DATABASE_URL=${{ env.DATABASE_URL }}" > .env
          echo "JWT_SECRET=${{ env.JWT_SECRET }}" >> .env
          echo "GOOGLE_CLIENT_ID=${{ env.GOOGLE_CLIENT_ID }}" >> .env
          echo "GOOGLE_CLIENT_SECRET=${{ env.GOOGLE_CLIENT_SECRET }}" >> .env
          echo "PORT=8080" >> .env
          echo "NODE_ENV=test" >> .env
          echo "WEB_APP_URL=http://localhost:5173" >> .env

      - name: Generate Prisma Client & Run Migrations
        run: |
          cd apps/api
          npx prisma generate
          npx prisma migrate deploy

      - name: Run Linter
        run: npm run lint

      - name: Run Tests
        run: npm test

      - name: Build Application
        run: npm run build

  # --- Build and Push Docker Images Job ---
  build_and_push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: ci
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: api
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/api:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/api:latest
          cache-from: type=gha,scope=api
          cache-to: type=gha,scope=api,mode=max

      - name: Build and push Web image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: web
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/web:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/web:latest
          cache-from: type=gha,scope=web
          cache-to: type=gha,scope=web,mode=max

  # --- Deploy to Production Job ---
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build_and_push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Deploy to Production Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          source: "docker-compose.prod.yml"
          target: "~/adopte1etudiant-mvp/"
          script: |
            echo "🚀 Starting automated deployment..."

            # Create project directory if it doesn't exist
            echo "📁 Setting up project directory..."
            mkdir -p ~/adopte1etudiant-mvp
            cd ~/adopte1etudiant-mvp

            # Verify docker-compose.prod.yml exists (should be copied by ssh-action)
            echo "📋 Checking docker-compose.prod.yml is available..."
            if [ ! -f docker-compose.prod.yml ]; then
              echo "❌ docker-compose.prod.yml not found in deployment directory"
              exit 1
            fi

            # Verify the file is valid YAML
            echo "Validating docker-compose.prod.yml..."
            if ! grep -q "version:" docker-compose.prod.yml; then
              echo "❌ docker-compose.prod.yml is not valid"
              echo "File contents:"
              cat docker-compose.prod.yml
              exit 1
            fi

            # Detect Docker Compose command (compatibility with different versions)
            echo "🐳 Detecting Docker Compose version..."
            if command -v docker-compose &> /dev/null; then
              DOCKER_COMPOSE="docker-compose"
              echo "Using docker-compose (legacy)"
            elif docker compose version &> /dev/null; then
              DOCKER_COMPOSE="docker compose"
              echo "Using docker compose (plugin)"
            else
              echo "❌ Docker Compose not found. Installing..."
              sudo apt-get update
              sudo apt-get install -y docker-compose-plugin
              DOCKER_COMPOSE="docker compose"
            fi

            # Set up .env file from secrets
            echo "⚙️ Creating .env file from secrets..."
            cat > .env << EOF
            POSTGRES_USER=${{ secrets.PROD_POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.PROD_POSTGRES_PASSWORD }}
            POSTGRES_DB=${{ secrets.PROD_POSTGRES_DB }}
            DATABASE_URL=postgresql://${{ secrets.PROD_POSTGRES_USER }}:${{ secrets.PROD_POSTGRES_PASSWORD }}@postgres:5432/${{ secrets.PROD_POSTGRES_DB }}?schema=public
            JWT_SECRET=${{ secrets.PROD_JWT_SECRET }}
            WEB_APP_URL=${{ secrets.PROD_WEB_APP_URL }}
            GOOGLE_CLIENT_ID=${{ secrets.PROD_GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.PROD_GOOGLE_CLIENT_SECRET }}
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            API_IMAGE_TAG=${{ github.sha }}
            WEB_IMAGE_TAG=${{ github.sha }}
            EOF

            # Stop existing containers gracefully
            echo "🛑 Stopping existing containers..."
            $DOCKER_COMPOSE -f docker-compose.prod.yml down --remove-orphans || true

            # Log in to Docker Hub
            echo "🔐 Logging into Docker Hub..."
            echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

            # Pull latest images
            echo "📦 Pulling latest Docker images..."
            $DOCKER_COMPOSE -f docker-compose.prod.yml pull

            # Start services
            echo "🚀 Starting services..."
            $DOCKER_COMPOSE -f docker-compose.prod.yml up -d --force-recreate

            # Wait for API container to be ready
            echo "⏳ Waiting for API container to be ready..."
            for i in {1..30}; do
              if $DOCKER_COMPOSE -f docker-compose.prod.yml ps | grep -q "adopte1etudiant-api.*running"; then
                echo "✅ API container is running"
                break
              fi
              echo "Waiting... ($i/30)"
              sleep 2
            done

            # Run database migrations
            echo "🗄️ Running database migrations..."
            # Wait a bit more for the database to be fully ready
            sleep 10

            # Run migrations with retry logic
            for attempt in {1..5}; do
              echo "Migration attempt $attempt/5..."
              if $DOCKER_COMPOSE -f docker-compose.prod.yml exec -T api npx prisma migrate deploy; then
                echo "✅ Database migrations completed successfully"
                break
              else
                echo "⚠️ Migration attempt $attempt failed"
                if [ $attempt -eq 5 ]; then
                  echo "❌ All migration attempts failed"
                  echo "Checking API container logs for errors:"
                  $DOCKER_COMPOSE -f docker-compose.prod.yml logs api --tail=50
                  exit 1
                fi
                echo "Waiting 10 seconds before retry..."
                sleep 10
              fi
            done

                        # Health check
            echo "🏥 Performing health checks..."
            sleep 5

            # Check if containers are running
            echo "Container status:"
            $DOCKER_COMPOSE -f docker-compose.prod.yml ps

            # Show container logs for debugging
            echo "Recent container logs:"
            echo "=== API Logs ==="
            $DOCKER_COMPOSE -f docker-compose.prod.yml logs api --tail=20
            echo "=== Web Logs ==="
            $DOCKER_COMPOSE -f docker-compose.prod.yml logs web --tail=10
            echo "=== Database Logs ==="
            $DOCKER_COMPOSE -f docker-compose.prod.yml logs postgres --tail=10

            # Test API health endpoint with more details
            echo "Testing API health endpoint..."
            if curl -f http://localhost:8080/health; then
              echo "✅ API health check passed"
            else
              echo "⚠️ API health check failed"
              echo "Trying to get more API information..."
              curl -v http://localhost:8080/health || echo "Cannot connect to API"
            fi

            # Test web server with more details
            echo "Testing web server..."
            if curl -f -I http://localhost:80; then
              echo "✅ Web server health check passed"
            else
              echo "⚠️ Web server health check failed"
              echo "Trying to get more web server information..."
              curl -v -I http://localhost:80 || echo "Cannot connect to web server"
            fi

            echo ""
            echo "🎉 Deployment completed successfully!"
            echo "📍 Your app should be available at: ${{ secrets.PROD_WEB_APP_URL }}"
            echo "🔧 API endpoint: http://${{ secrets.PROD_HOST }}:8080"
