name: CI/CD Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  JWT_SECRET: "test-jwt-secret-for-ci"
  GOOGLE_CLIENT_ID: "test-google-client-id"
  GOOGLE_CLIENT_SECRET: "test-google-client-secret"

jobs:
  # --- Continuous Integration Job ---
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd "pg_isready -U testuser"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Security Audit
        run: |
          npm audit fix || npm audit fix --force
          npm audit || true

      - name: Security Scan Dependencies
        run: |
          # Install Trivy if not available
          if ! command -v trivy &> /dev/null; then
            echo "Installing Trivy for security scanning..."
            curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.48.0
          fi

          # Scan for vulnerabilities in dependencies
          echo "Scanning for security vulnerabilities..."
          trivy fs --severity HIGH,CRITICAL . || echo "Security scan completed with findings"

      - name: Setup Environment Variables
        run: |
          cd apps/api
          cp .env.example .env
          echo "DATABASE_URL=postgresql://testuser:testpass@localhost:5432/testdb" > .env
          echo "JWT_SECRET=${{ env.JWT_SECRET }}" >> .env
          echo "GOOGLE_CLIENT_ID=${{ env.GOOGLE_CLIENT_ID }}" >> .env
          echo "GOOGLE_CLIENT_SECRET=${{ env.GOOGLE_CLIENT_SECRET }}" >> .env
          echo "PORT=8080" >> .env
          echo "NODE_ENV=test" >> .env
          echo "WEB_APP_URL=http://localhost:5173" >> .env

      - name: Generate Prisma Client & Run Migrations
        run: |
          cd apps/api
          npx prisma generate
          npx prisma migrate deploy

      - name: Run Linter
        run: npm run lint

      - name: Run Tests
        run: npm test

      - name: Build Application
        run: npm run build

  # --- Build and Push Docker Images Job ---
  build_and_push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: ci
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 20

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Parallel build for better performance
      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: api
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/api:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/api:latest
          cache-from: type=gha,scope=api
          cache-to: type=gha,scope=api,mode=max
          platforms: linux/amd64

      - name: Build and push Web image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: web
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/web:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/web:latest
          cache-from: type=gha,scope=web
          cache-to: type=gha,scope=web,mode=max
          build-args: |
            VITE_API_URL=/api
          platforms: linux/amd64

  # --- Deploy to Production Job ---
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build_and_push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 30

    steps:
      - name: Deploy to Production Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            # Enhanced rollback function with better error handling
            rollback() {
              echo "üîÑ Rolling back to previous version..."
              if [ "$CURRENT_API_TAG" != "none" ] && [ "$CURRENT_WEB_TAG" != "none" ]; then
                echo "Rolling back API to: $CURRENT_API_TAG"
                echo "Rolling back Web to: $CURRENT_WEB_TAG"
                
                # Update .env with previous tags
                sed -i "s/API_IMAGE_TAG=.*/API_IMAGE_TAG=$CURRENT_API_TAG/" .env
                sed -i "s/WEB_IMAGE_TAG=.*/WEB_IMAGE_TAG=$CURRENT_WEB_TAG/" .env
                
                # Restart with previous images
                $DOCKER_COMPOSE -f docker-compose.prod.yml up -d --force-recreate
                
                echo "‚úÖ Rollback completed"
              else
                echo "‚ùå Cannot rollback - no previous version available"
              fi
              exit 1
            }

            # Set up error handling
            set -e
            trap rollback ERR

            echo "üöÄ Starting optimized deployment..."

            # Create project directory if it doesn't exist
            echo "üìÅ Setting up project directory..."
            mkdir -p ~/adopte1etudiant-mvp
            cd ~/adopte1etudiant-mvp

            # Use the committed docker-compose.prod.yml instead of generating it
            echo "üìã Using committed docker-compose.prod.yml..."
            # Ensure the committed docker-compose.prod.yml is in the deployment directory
            cp ${{ github.workspace }}/docker-compose.prod.yml ./

            # if [ ! -f "docker-compose.prod.yml" ]; then
            #   echo "‚ùå docker-compose.prod.yml not found. Please commit this file to your repository."
            #   exit 1
            # fi

            # Detect Docker Compose command (compatibility with different versions)
            echo "üê≥ Detecting Docker Compose version..."
            if command -v docker-compose &> /dev/null; then
              DOCKER_COMPOSE="docker-compose"
              echo "Using docker-compose (legacy)"
            elif docker compose version &> /dev/null; then
              DOCKER_COMPOSE="docker compose"
              echo "Using docker compose (plugin)"
            else
              echo "‚ùå Docker Compose not found. Installing..."
              sudo apt-get update
              sudo apt-get install -y docker-compose-plugin
              DOCKER_COMPOSE="docker compose"
            fi

            # Set up .env file from secrets
            echo "‚öôÔ∏è Creating .env file from secrets..."
            cat > .env << EOF
            POSTGRES_USER=${{ secrets.PROD_POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.PROD_POSTGRES_PASSWORD }}
            POSTGRES_DB=${{ secrets.PROD_POSTGRES_DB }}
            DATABASE_URL=postgresql://${{ secrets.PROD_POSTGRES_USER }}:${{ secrets.PROD_POSTGRES_PASSWORD }}@postgres:5432/${{ secrets.PROD_POSTGRES_DB }}?schema=public
            JWT_SECRET=${{ secrets.PROD_JWT_SECRET }}
            WEB_APP_URL=${{ secrets.PROD_WEB_APP_URL }}
            GOOGLE_CLIENT_ID=${{ secrets.PROD_GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.PROD_GOOGLE_CLIENT_SECRET }}
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            API_IMAGE_TAG=${{ github.sha }}
            WEB_IMAGE_TAG=${{ github.sha }}
            VITE_API_URL=/api
            EOF

            # Debug: Show environment variables (without sensitive data)
            echo "üîç Environment variables check (non-sensitive):"
            echo "POSTGRES_USER: ${{ secrets.PROD_POSTGRES_USER }}"
            echo "POSTGRES_DB: ${{ secrets.PROD_POSTGRES_DB }}"
            echo "DATABASE_URL: postgresql://${{ secrets.PROD_POSTGRES_USER }}:***@postgres:5432/${{ secrets.PROD_POSTGRES_DB }}?schema=public"
            echo "WEB_APP_URL: ${{ secrets.PROD_WEB_APP_URL }}"
            echo "DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}"
            echo "API_IMAGE_TAG: ${{ github.sha }}"
            echo "WEB_IMAGE_TAG: ${{ github.sha }}"

            # Create database backup before deployment
            echo "üíæ Creating database backup before deployment..."
            if $DOCKER_COMPOSE -f docker-compose.prod.yml ps | grep -q "adopte1etudiant-db.*Up"; then
              BACKUP_FILE="backup_$(date +%Y%m%d_%H%M%S).sql"
              $DOCKER_COMPOSE -f docker-compose.prod.yml exec -T postgres pg_dump -U ${{ secrets.PROD_POSTGRES_USER }} ${{ secrets.PROD_POSTGRES_DB }} > ~/adopte1etudiant-mvp/$BACKUP_FILE
              echo "‚úÖ Database backup created: $BACKUP_FILE"
            else
              echo "‚ö†Ô∏è Database container not running, skipping backup"
            fi

            # Stop existing containers gracefully (preserving volumes to maintain data)
            echo "üõë Stopping existing containers..."
            echo "‚ÑπÔ∏è Preserving database volumes to maintain production data."
            $DOCKER_COMPOSE -f docker-compose.prod.yml down --remove-orphans || true

            # Store current image tags for potential rollback
            echo "üìã Storing current image tags for rollback..."
            CURRENT_API_TAG=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep "${{ secrets.DOCKERHUB_USERNAME }}/api" | head -1 | awk '{print $2}' || echo "none")
            CURRENT_WEB_TAG=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep "${{ secrets.DOCKERHUB_USERNAME }}/web" | head -1 | awk '{print $2}' || echo "none")
            echo "Current API tag: $CURRENT_API_TAG"
            echo "Current Web tag: $CURRENT_WEB_TAG"

            # Log in to Docker Hub
            echo "üîê Logging into Docker Hub..."
            echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

            # Pull latest images
            echo "üì¶ Pulling latest Docker images..."
            $DOCKER_COMPOSE -f docker-compose.prod.yml pull

            # Start services
            echo "üöÄ Starting services..."
            $DOCKER_COMPOSE -f docker-compose.prod.yml up -d --force-recreate

            # Enhanced health check with better timing
            echo "‚è≥ Waiting for services to start..."
            sleep 20

            # Check container status
            echo "üîç Checking container status..."
            $DOCKER_COMPOSE -f docker-compose.prod.yml ps

            # Wait for API container to be ready with improved logic
            echo "‚è≥ Waiting for API container to be ready..."
            for i in {1..15}; do
              if $DOCKER_COMPOSE -f docker-compose.prod.yml ps | grep -q "adopte1etudiant-api.*Up"; then
                echo "‚úÖ API container is running"
                sleep 10
                break
              fi
              echo "Waiting for container to start... ($i/15)"
              if [ $((i % 5)) -eq 0 ]; then
                echo "Current container status:"
                $DOCKER_COMPOSE -f docker-compose.prod.yml ps
              fi
              sleep 5
            done

            # Final container status check
            if ! $DOCKER_COMPOSE -f docker-compose.prod.yml ps | grep -q "adopte1etudiant-api.*Up"; then
              echo "‚ùå API container is not running properly."
              echo "API container logs:"
              $DOCKER_COMPOSE -f docker-compose.prod.yml logs --tail=50 api
              exit 1
            fi

            # Debug: Check environment variables in API container
            echo "üîç Checking environment variables in API container..."
            $DOCKER_COMPOSE -f docker-compose.prod.yml exec -T api env | grep -E "(DATABASE_URL|JWT_SECRET|NODE_ENV)" || echo "Could not check environment variables"

            # Run database migrations with improved retry logic
            echo "üóÑÔ∏è Running database migrations..."
            sleep 10

            for attempt in {1..5}; do
              echo "Migration attempt $attempt/5..."
              if $DOCKER_COMPOSE -f docker-compose.prod.yml exec -T api npx prisma migrate deploy; then
                echo "‚úÖ Database migrations completed successfully"
                break
              else
                echo "‚ö†Ô∏è Migration attempt $attempt failed"
                if [ $attempt -eq 5 ]; then
                  echo "‚ùå All migration attempts failed"
                  echo "API container logs:"
                  $DOCKER_COMPOSE -f docker-compose.prod.yml logs --tail=50 api
                  echo "Database container logs:"
                  $DOCKER_COMPOSE -f docker-compose.prod.yml logs --tail=20 postgres
                  exit 1
                fi
                echo "Waiting 15 seconds before retry..."
                sleep 15
              fi
            done

            # Enhanced health checks
            echo "üè• Performing comprehensive health checks..."
            sleep 10

            # Check container status
            echo "Container status:"
            $DOCKER_COMPOSE -f docker-compose.prod.yml ps

            # Test API health endpoint
            echo "Testing API health endpoint..."
            if curl -f -m 30 http://localhost:8080/health; then
              echo "‚úÖ API health check passed"
            else
              echo "‚ùå API health check failed"
              curl -v http://localhost:8080/health || echo "Cannot connect to API"
              exit 1
            fi

            # Test web server
            echo "Testing web server..."
            if curl -f -m 30 -I http://localhost:80; then
              echo "‚úÖ Web server health check passed"
            else
              echo "‚ùå Web server health check failed"
              curl -v -I http://localhost:80 || echo "Cannot connect to web server"
              exit 1
            fi

            echo ""
            echo "üéâ Deployment completed successfully!"
            echo "üìç Your app should be available at: ${{ secrets.PROD_WEB_APP_URL }}"
            echo "üîß API endpoint: http://${{ secrets.PROD_HOST }}:8080"

            # Clean up old backups (keep last 5)
            echo "üßπ Cleaning up old backups..."
            ls -t ~/adopte1etudiant-mvp/backup_*.sql 2>/dev/null | tail -n +6 | xargs -r rm
            echo "‚úÖ Backup cleanup completed"

            # Clean up old Docker images to save disk space
            echo "üßπ Cleaning up old Docker images..."
            docker image prune -f
            echo "‚úÖ Docker cleanup completed"
