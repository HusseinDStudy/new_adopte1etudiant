name: CI/CD Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  DATABASE_URL: "postgresql://testuser:testpass@localhost:5432/testdb"
  JWT_SECRET: "test-jwt-secret-for-ci"
  GOOGLE_CLIENT_ID: "test-google-client-id"
  GOOGLE_CLIENT_SECRET: "test-google-client-secret"

jobs:
  # --- Continuous Integration Job ---
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Setup Environment Variables
        run: |
          cd apps/api
          cp .env.example .env
          echo "DATABASE_URL=${{ env.DATABASE_URL }}" > .env
          echo "JWT_SECRET=${{ env.JWT_SECRET }}" >> .env
          echo "GOOGLE_CLIENT_ID=${{ env.GOOGLE_CLIENT_ID }}" >> .env
          echo "GOOGLE_CLIENT_SECRET=${{ env.GOOGLE_CLIENT_SECRET }}" >> .env
          echo "PORT=8080" >> .env
          echo "NODE_ENV=test" >> .env
          echo "WEB_APP_URL=http://localhost:5173" >> .env

      - name: Generate Prisma Client & Run Migrations
        run: |
          cd apps/api
          npx prisma generate
          npx prisma migrate deploy

      - name: Run Linter
        run: npm run lint

      - name: Run Tests
        run: npm test

      - name: Build Application
        run: npm run build

  # --- Simple Deployment Job ---
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: ci
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Deploy to Production Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            # Navigate to project directory
            cd ~/adopte1etudiant-mvp

            # Pull latest changes
            git pull origin main

            # Create .env file if it doesn't exist
            if [ ! -f ".env" ]; then
              echo "Creating .env file from template..."
              cp .env.production.example .env
              echo "Please update .env file with your production values!"
              exit 1
            fi

            # Install dependencies
            npm ci --production

            # Build the application
            npm run build

            # Run database migrations
            cd apps/api
            npx prisma migrate deploy

            # Restart services (assuming PM2 or similar process manager)
            pm2 restart adopte1etudiant || pm2 start npm --name "adopte1etudiant" -- start

            echo "âœ… Deployment completed successfully!"
