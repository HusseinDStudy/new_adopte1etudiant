name: CI/CD Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  DATABASE_URL: "postgresql://testuser:testpass@localhost:5432/testdb"
  JWT_SECRET: "test-jwt-secret-for-ci"
  GOOGLE_CLIENT_ID: "test-google-client-id"
  GOOGLE_CLIENT_SECRET: "test-google-client-secret"

jobs:
  # --- Continuous Integration Job ---
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Setup Environment Variables
        run: |
          cd apps/api
          cp .env.example .env
          echo "DATABASE_URL=${{ env.DATABASE_URL }}" > .env
          echo "JWT_SECRET=${{ env.JWT_SECRET }}" >> .env
          echo "GOOGLE_CLIENT_ID=${{ env.GOOGLE_CLIENT_ID }}" >> .env
          echo "GOOGLE_CLIENT_SECRET=${{ env.GOOGLE_CLIENT_SECRET }}" >> .env
          echo "PORT=8080" >> .env
          echo "NODE_ENV=test" >> .env
          echo "WEB_APP_URL=http://localhost:5173" >> .env

      - name: Generate Prisma Client & Run Migrations
        run: |
          cd apps/api
          npx prisma generate
          npx prisma migrate deploy

      - name: Run Linter
        run: npm run lint

      - name: Run Tests
        run: npm test

      - name: Build Application
        run: npm run build

  # --- Build and Push Docker Images Job ---
  build_and_push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: ci
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: api
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/api:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/api:latest
          cache-from: type=gha,scope=api
          cache-to: type=gha,scope=api,mode=max

      - name: Build and push Web image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: web
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/web:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/web:latest
          cache-from: type=gha,scope=web
          cache-to: type=gha,scope=web,mode=max

  # --- Deploy to Production Job ---
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build_and_push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to Production Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            # Navigate to project directory
            cd ~/adopte1etudiant-mvp

            # The docker-compose.prod.yml should be already on the server.
            # We are removing `git pull` as deployments should be based on
            # immutable artifacts (Docker images), not on the latest git commit.

            # Set up .env file from secrets
            echo "Creating .env file from secrets..."
            echo "POSTGRES_USER=${{ secrets.PROD_POSTGRES_USER }}" > .env
            echo "POSTGRES_PASSWORD=${{ secrets.PROD_POSTGRES_PASSWORD }}" >> .env
            echo "POSTGRES_DB=${{ secrets.PROD_POSTGRES_DB }}" >> .env
            echo "DATABASE_URL=postgresql://${{ secrets.PROD_POSTGRES_USER }}:${{ secrets.PROD_POSTGRES_PASSWORD }}@postgres:5432/${{ secrets.PROD_POSTGRES_DB }}?schema=public" >> .env
            echo "JWT_SECRET=${{ secrets.PROD_JWT_SECRET }}" >> .env
            echo "WEB_APP_URL=${{ secrets.PROD_WEB_APP_URL }}" >> .env
            echo "GOOGLE_CLIENT_ID=${{ secrets.PROD_GOOGLE_CLIENT_ID }}" >> .env
            echo "GOOGLE_CLIENT_SECRET=${{ secrets.PROD_GOOGLE_CLIENT_SECRET }}" >> .env
            echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> .env

            # Add image tags to .env file for docker-compose to use
            # IMPORTANT: Your docker-compose.prod.yml services must use these variables.
            # Example:
            # services:
            #   api:
            #     image: ${{ secrets.DOCKERHUB_USERNAME }}/api:${API_IMAGE_TAG:-latest}
            #   web:
            #     image: ${{ secrets.DOCKERHUB_USERNAME }}/web:${WEB_IMAGE_TAG:-latest}
            echo "API_IMAGE_TAG=${{ github.sha }}" >> .env
            echo "WEB_IMAGE_TAG=${{ github.sha }}" >> .env

            # Log in to Docker Hub
            echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

            # Pull latest images using the specific commit SHA tag
            docker compose -f docker-compose.prod.yml pull

            # Start services
            docker compose -f docker-compose.prod.yml up -d --force-recreate

            # Run database migrations
            docker compose -f docker-compose.prod.yml exec -T api npx prisma migrate deploy

            echo "âœ… Deployment completed successfully!"
