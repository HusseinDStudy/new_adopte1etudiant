datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/client"
}

enum Role {
  STUDENT
  COMPANY
  ADMIN
}

enum ApplicationStatus {
  NEW
  SEEN
  INTERVIEW
  REJECTED
  HIRED
}

enum AdoptionRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  passwordHash    String?
  passwordLoginDisabled Boolean          @default(false)
  isActive        Boolean          @default(true)
  role            Role
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // 2FA / MFA Fields
  isTwoFactorEnabled      Boolean          @default(false)
  twoFactorSecret         String?
  twoFactorRecoveryCodes  String[]

  accounts        Account[]
  studentProfile  StudentProfile?
  companyProfile  CompanyProfile?
  applications    Application[]
  messages        Message[]
  adoptionRequests AdoptionRequest[] @relation("ReceivedAdoptionRequests")
  conversationParticipants ConversationParticipant[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model StudentProfile {
  id        String          @id @default(cuid())
  userId    String          @unique
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName String
  lastName  String
  school    String?
  degree    String?
  cvUrl     String?
  skills    StudentSkill[]
  isOpenToOpportunities Boolean @default(false)
  isCvPublic Boolean @default(false)
}

model CompanyProfile {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  logoUrl     String?
  size        String?
  sector      String?
  contactEmail String
  offers      Offer[]
  adoptionRequests AdoptionRequest[] @relation("SentAdoptionRequests")
}

model Skill {
  id            String          @id @default(cuid())
  name          String          @unique
  studentSkills StudentSkill[]
  offerSkills   Offer[]         @relation("OfferSkills")
}

model StudentSkill {
  studentProfileId String
  skillId          String
  studentProfile   StudentProfile @relation(fields: [studentProfileId], references: [id], onDelete: Cascade)
  skill            Skill          @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@id([studentProfileId, skillId])
}

model Offer {
  id            String        @id @default(cuid())
  title         String
  description   String
  location      String?
  duration      String?
  isActive      Boolean       @default(true)
  companyId     String
  company       CompanyProfile @relation(fields: [companyId], references: [id])
  skills        Skill[]       @relation("OfferSkills")
  applications  Application[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Application {
  id        String            @id @default(cuid())
  offerId   String
  studentId String
  status    ApplicationStatus @default(NEW)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  offer          Offer         @relation(fields: [offerId], references: [id], onDelete: Cascade)
  student        User          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId String?       @unique

  @@unique([studentId, offerId])
}

model Conversation {
  id             String       @id @default(cuid())
  topic          String?
  isReadOnly      Boolean          @default(false) // If true, only admin can send messages
  isBroadcast     Boolean          @default(false) // If true, this is a broadcast message
  broadcastTarget BroadcastTarget? // Target audience for broadcast messages
  context         ConversationContext? // Context of the conversation (adoption request, offer, etc.)
  contextId       String?          // ID of the related entity (adoption request ID, offer ID, etc.)
  status          ConversationStatus @default(ACTIVE) // Status of the conversation
  expiresAt       DateTime?        // When the conversation expires (for hired offers)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  messages        Message[]
  participants    ConversationParticipant[]
  application     Application?
  adoptionRequest AdoptionRequest?
}

enum ConversationContext {
  ADOPTION_REQUEST
  OFFER
  ADMIN_MESSAGE
  BROADCAST
}

enum ConversationStatus {
  ACTIVE
  ARCHIVED
  EXPIRED
  PENDING_APPROVAL
}

enum BroadcastTarget {
  ALL
  STUDENTS
  COMPANIES
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  conversationId String
  userId         String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  joinedAt       DateTime     @default(now())

  @@unique([conversationId, userId])
  @@map("conversation_participants")
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  senderId       String
  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
  content        String
  createdAt      DateTime     @default(now())
}

model AdoptionRequest {
  id          String                @id @default(cuid())
  companyId   String
  studentId   String
  status      AdoptionRequestStatus @default(PENDING)
  message     String?               // Initial message from company
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  company     CompanyProfile        @relation("SentAdoptionRequests", fields: [companyId], references: [id], onDelete: Cascade)
  student     User                  @relation("ReceivedAdoptionRequests", fields: [studentId], references: [id], onDelete: Cascade)
  conversation   Conversation?         @relation(fields: [conversationId], references: [id])
  conversationId String?               @unique

  @@unique([companyId, studentId])
}

enum PostStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
  ARCHIVED
}

enum ContentFormat {
  MARKDOWN
  HTML
  MDX
  JSON
}

model BlogPost {
  id          String       @id @default(cuid())
  title       String       @db.VarChar(140)
  slug        String       @unique @db.VarChar(150)
  excerpt     String?      @db.Text
  content     String       @db.Text
  contentFormat ContentFormat @default(MARKDOWN)

  image       String?

  categoryId  String
  category    BlogCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  // Prefer a relation if you have a User model:
  // authorId String
  // author   User @relation(fields: [authorId], references: [id], onDelete: Restrict)
  author      String

  readTimeMinutes Int? // denormalized; compute from content and store if you want

  status      PostStatus  @default(DRAFT)
  featured    Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  publishedAt DateTime?

  // SEO
  metaTitle       String? @db.VarChar(60)
  metaDescription String? @db.VarChar(160)
  canonicalUrl    String?

  // Tags if you add BlogTag
  // tags BlogTag[]

  @@map("blog_posts")
  @@index([status, createdAt])
  @@index([featured, createdAt])
  @@index([categoryId])
}

model BlogCategory {
  id          String @id @default(cuid())
  name        String @unique
  slug        String @unique @db.VarChar(100)
  description String?
  icon        String?
  color       String?
  posts       BlogPost[]

  @@map("blog_categories")
}
